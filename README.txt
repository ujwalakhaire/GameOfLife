PROBLEM ONE: GAME OF LIFE
 
The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbours, which are the cells that are directly horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:
Any live cell with fewer than two live neighbours dies, as if by loneliness.
Any live cell with more than three live neighbours dies, as if by overcrowding.
Any live cell with two or three live neighbours lives, unchanged, to the next generation.
Any dead cell with exactly three live neighbours comes to life.
The initial pattern constitutes the 'seed' of the system. The first generation is created by applying the above rules Simultaneously to every cell in the seed — births and deaths happen simultaneously, and the discrete moment at which this happens is sometimes called a tick. (In other words, each generation is a pure function of the one before.) The rules continue to be applied repeatedly to create further generations.
 
Problem.
The inputs below represent the cells in the universe as X or - . X is a alive cell. - is a dead cell or no cell. The below inputs provide the provide pattern or initial cells in the universe. The output is the state of the system in the next tick (one run of the application of all the rules), represented in the same format.
 
-------------------------------------------------------------------------------------------
Input A:
(Block pattern)
     X X
     X X
                                          
Output A:
     X X
     X X
 
-------------------------------------------------------------------------------------------
Input B
(Boat pattern)
X X -
X - X
- X -
 
Output B
X X -
X - X
- X -
 
-------------------------------------------------------------------------------------------
Input C
(Blinker pattern)
     - X -
     - X -
     - X -
 
Output C
     - - -
     X X X
     - - -
 
-------------------------------------------------------------------------------------------
Input D
(Toad pattern)
        - X X X
        X X X -
 
Output D
        - - X -
        X - - X
        X - - X
        - X - -

==============================================

OVERVIEW
GameOfLife is a console application which consists of board of live and dead cells. Board is constructed using data present in the input sample files. Input sample file can only contain x (live cells), - (dead cells) and white spaces (which are ignored.). GameController mediates input from file and commands board configuration and generation of ticks and also notify formatters to display output of the ticks. MVC design pattern is used to organize the applciation.

TO BUILD & RUN THE APPLICATION
1. Go to https://github.com/ujwalakhaire/GameOfLife
2. Checkout the solution.
3. Open it in VS IDE 2010.
4. Build the solution.
5. Navigate to Release folder in the GameOfLife project ( bin -> release)
6. Open command prompt.
7. Drag and drop GameOfLife.exe on command prompt.
8. Provide file path.
	- Sample files (input.txt, pattern_boat.txt, pattern_blinker.txt, pattern_block.txt & pattern_toad.txt) are available in GameOfLife project.
	- Update input.txt if you would like to see output for different pattern.
	- If solution is kept on C:\code folder, command would look like following :

		C:\code\GameOfLife\GameOfLife\bin\Release\GameOfLife.exe C:\code\GameOfLife\GameOfLife\pattern_blinker.txt
9. Hit Enter to see the input.
10. As mentioned on the console, press any key to see the next generation.


TO RUN NUnit TEST
1. Functional Tests are written which uses pattern given in the problem statement to verify output generated by one tick. Data is stored in-memory.
2. Unit tests are written to test board configuration and cell equality and ToString() method.
3. Open NUnit-x86.exe (On win-7, location is C:\Program Files (x86)\NUnit 2.6\bin\ )
4. Load GameOfLifeTest dll and run the tests.